#!/bin/bash

backup()
{
    [[ -n "$1" ]] && SOURCE_DIR="$1" || return 1
    [[ -n "$2" ]] && ROOT_DIR="$2" || return 1
    
    [[ -z $(sed -n '\#^/#p' <<< $ROOT_DIR) ]] && ROOT_DIR="$BACKUP_ROOTDIR/$ROOT_DIR"
    [[ ! -e $EXCLUDE ]] && EXCLUDE=/dev/null

    case "$PERIOD" in
        "month")
            FORMAT=%Y-%m
            ;;
        "day")
            FORMAT=%F
            ;;
        *)
            PERIOD="week"
            FORMAT=%G-%V
            ;;
    esac

    DEST_DIR="$ROOT_DIR/$(date +$FORMAT)";
    FILE_DATE=$(date +%F-%s)
    mkdir -p "$DEST_DIR";
tar --create --recursion --preserve-permissions --totals --sparse --ignore-failed-read --gzip \
 --file="$DEST_DIR/$FILE_DATE.tar.gz" \
 --listed-incremental="$DEST_DIR/backup.snar" \
 --one-file-system \
 --verbose \
 --exclude-backups \
 --exclude-from="$EXCLUDE" \
 --index-file="$DEST_DIR/$FILE_DATE.log" \
 $SOURCE_DIR; 

    ln -fns "$DEST_DIR" "$ROOT_DIR/last"

    prev_week="$ROOT_DIR/$(date -d "$ROTATE $PERIOD ago" +$FORMAT)"
    if [[ -d "$prev_week" ]]; then
        rm -rf "$prev_week"
    fi
    return 0;
}

lvm_backup()
{
    [[ -n $1 ]] && lvpath="$1" || return 1
    [[ -n $2 ]] && subdirs=${@:2} || subdirs=""
    
    lvname=$(basename $lvpath)
    vg_lv=$(sed 's#/#-#g' <<< "$1")
    mnt_snap="/mnt/$vg_lv"
    mount_opt="ro"
    fstype=$(blkid -o value -s TYPE "/dev/$lvpath")


    #mpoint=$(sed -n "/$vg_lv /p" /proc/mounts | awk '{print $2}')    
    #fstype=$(sed -n "/$vg_lv /p" /proc/mounts | awk '{print $3}')    
    #while read a b c d; do
    #    if [[ -n $(echo $a | sed -n "/$vg_lv\$/p") ]]; then
    #        mpoint=$b
    #        fstype=$c
    #        break
    #    fi;
    #done < /proc/mounts;
    #echo $mpoint $fstype;
    #exit;

    
    if [[ $fstype = "xfs" ]]; then
        mount_opt="$mount_opt,nouuid,norecovery" 
        #xfs_freeze -f $mpoint
    fi;
    if lvcreate -s -n "${lvname}-snap" -l 1%ORIGIN -p r $lvpath; then
        #if [[ $fstype = "xfs" ]]; then
            #xfs_freeze -u $mpoint
        #fi;
        mkdir -p "$mnt_snap"
        if mount -o $mount_opt "/dev/${lvpath}-snap" "$mnt_snap"; then
            if [[ -n "$subdirs" ]]; then
                for subdir in $subdirs; do
                    backup "$mnt_snap/$subdir" "$lvpath/$subdir";
                done;
            else
                backup "$mnt_snap" "$lvpath";
            fi;
            umount "/dev/${lvpath}-snap"
        fi;
        rm -rf "$mnt_snap"
        lvremove -f "${lvpath}-snap"
    #else
    #    if [[ $fstype = "xfs" ]]; then
    #        xfs_freeze -u $mpoint
    #    fi;
    fi;
    return 0
}

mysql_backup()
{
    [[ -n $1 ]] && user="$1" || return 1
    [[ -n $2 ]] && pass="$2" || return 1

    tmpdest="$BACKUP_ROOTDIR/mysqldump"
    mkdir -p $tmpdest

    for i in $(mysql -u $user -p$pass -e'show databases;' | grep -v information_schema | grep -v Database); do
        mysqldump --lock-tables -u $user -p$pass $i > "$tmpdest/mysqldump-$i.sql";
    done;
    backup "$tmpdest" mysql
    rm -rf "$tmpdest"
    return 0
}


